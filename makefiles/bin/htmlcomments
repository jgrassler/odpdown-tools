#!/usr/bin/python

# This script extracts all HTML comments from one or more text files and prints
# their contents in the order they are encountered. It is usually used to
# generate a transcript file from HTML comments added to odpdown slides.
#
# Copyright (c) 2018 Johannes Grassler <johannes@btw23.de>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from __future__ import print_function
from HTMLParser import HTMLParser

import codecs
import sys

class CommentExtractor(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.comments = []
    def handle_comment(self, data):
        self.comments.append(data)

e = CommentExtractor()

if len(sys.argv) > 1:
    for arg in sys.argv[1:]:
        try:
            r = codecs.getreader("utf8")(open(arg))
            for line in r.readlines():
                e.feed(line)
            e.close()
            r.close()
        except IOError as e:
            print("Couldn't open %s for reading: %s" % (arg, e.strerror))

for comment in e.comments:
    print(comment)
